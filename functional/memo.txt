더 읽을꺼리
<functional-light javascript> -Kyle Simpson
<Domain Modeling Made Functional> - Scott Wlaschin
<Grokking Functional Programming> -Michal Plachta


[Chapter 9 - P202]
계층형 설계 패턴
1. 직접 구현
    함수 본문에서 적절한 구체화 수준으로 해결
    만약 너무 구체적이라면 스멜코드

2. 추상화 벽
    중요한 세부 구현을 감추고 인터페이스를 제공

3. 작은 인터페이스
    비지니스 개념을 나타내는 중요한 인터페이스를 최소한으로 유지

4. 편리한 계층
    계층형 설계 패턴, 코드와 추상화 계층은 작업할때 편리하게 만듬


[Chapter 9 - P210]
추상화 벽을 사용하기 좋을때
1. 쉽게 구현을 바꾸기 위해
2. 코드를 읽고 쓰기 쉽게 만들기 위해
3. 팀 간에 조율해야 할 것을 줄이기 위해
4. 주어진 문제에 집중하기 위해


[Chapter 9 - P222]
호출그래프로 알수있는 세가지 비기능적 요구사항
1. 유지보수정 maintainability - 요구사항이 바뀌었을때 쉽게 고칠수있는 코드
2. 테스트성 testability - 어떤것을 테스트하는 것이 중요한가
3. 재사용성 reusability - 어떤 함수가 재사용하기 좋은가

- 위에 있으면 고치기 쉽고 아래있는 코드는 고치기 어렵다
- 아래에 있는 코드는 테스트가 중요하다
- 아래에 있는 코드가 재사용이 하기 좋다


[Chapter 10 - 일급함수 1 - P233]
- 코드의 냄새:함수 이름에 있는 암묵적인자 (일급값 first-class value)
- 일급인 것과 일급이 아닌것을 구별하기
   아닌것
    1. 수식연산자
    2. 반복문
    3. 조건문
    4. try/catch 블럭
   일급으로하수있는것
    1. 변수에 할당
    2. 함수의 인자로 넘기기
    3. 함수의 리턴값으로 받기
    4. 배열이나 객체에 담기
    
